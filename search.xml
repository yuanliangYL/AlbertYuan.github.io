<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    
    
    <entry>
      <title>iOS音视频开发（四）重识音频</title>
      <link href="/2021/08/10/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E5%9B%9B%E9%87%8D%E8%AF%86%E9%9F%B3%E9%A2%91/"/>
      <url>/2021/08/10/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E5%9B%9B%E9%87%8D%E8%AF%86%E9%9F%B3%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><blockquote><p>我们平时在互联网上听到的声音，都是先经过录制后，再传输到互联网上的。比如歌曲、电影、主播等的声音。</p></blockquote><h2 id="PCM"><a href="#PCM" class="headerlink" title="PCM"></a>PCM</h2><p>录音的原理可以简单理解为：把声源的振动记录下来，需要时再让某个物体按照记录下来的振动规律去振动，就会产生与原来一样的声音。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210310121149953-189520171.png" alt="记录"></p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210310121152546-1765363508.png" alt="重现"></p><p>如何把声音（声源的振动）记录下来呢？声音属于模拟信号，但更便于计算机处理和存储的是数字信号（二进制编码），所以需要将<strong>模拟信号</strong>（Analog Signal）转成<strong>数字信号</strong>（Digital Signal）后进行存储。这一过程，我们可以称之为：音频数字化。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210310124628437-1142357612.png" alt="模拟信号与数字信号的比喻"></p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210310124630934-1929901915.jpg" alt="模拟信号与数字信号的转换"></p><p>将音频数字化的常见技术方案是<strong>脉冲编码调制</strong>（<strong>PCM</strong>，Pulse Code Modulation），主要过程是：采样 → 量化 → 编码。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210310153043339-940528055.webp" alt="模拟信号转数字信号"></p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210310153515352-366749255.png" alt="模拟信号转数字信号"></p><h3 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h3><p>模拟信号的波形是无限光滑的，可以看成由无数个点组成，由于存储空间是相对有限的，数字编码过程中，必须要对波形的点进行采样。<strong>采样</strong>（Sampling）：每隔一段时间采集一次模拟信号的样本，是一个在时间上将模拟信号离散化（把连续信号转换成离散信号）的过程。</p><h4 id="采样率"><a href="#采样率" class="headerlink" title="采样率"></a>采样率</h4><p>每秒采集的样本数量，称为<strong>采样率</strong>（采样频率，采样速率，Sampling Rate）。比如，采样率44.1kHz表示1秒钟采集44100个样本。</p><h4 id="采样定理"><a href="#采样定理" class="headerlink" title="采样定理"></a>采样定理</h4><p>根据<a href="https://zh.wikipedia.org/wiki/%E9%87%87%E6%A0%B7%E5%AE%9A%E7%90%86">采样定理</a>（奈奎斯特–香农采样定理，Nyquist-Shannon sampling theorem）得知：只有当采样率高于声音信号最高频率的<strong>2</strong>倍时，才能把采集的声音信号唯一地还原成原来的声音。人耳能够感觉到的最高声音频率为20000Hz，因此为了满足人耳的听觉要求，需要至少每秒进行40000次采样（40kHz采样率）。这就是为什么常见的CD的采样率为44.1kHz。电话、无线对讲机、无线麦克风等的采样率是8kHZ。</p><h3 id="量化"><a href="#量化" class="headerlink" title="量化"></a>量化</h3><p><strong>量化</strong>（Quantization）：将每一个采样点的样本值数字化。</p><h4 id="位深度"><a href="#位深度" class="headerlink" title="位深度"></a>位深度</h4><p><strong>位深度</strong>（采样精度，采样大小，Bit Depth）：使用多少个二进制位来存储一个采样点的样本值。位深度越高，表示的振幅越精确。常见的CD采用16bit的位深度，能表示65536（2<sup>16</sup>）个不同的值。DVD使用24bit的位深度，大多数电话设备使用8bit的位深度。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210310162126093-1629151210.png" alt="不同采样率、位深度对比"></p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p><strong>编码</strong>：将采样和量化后的数字数据转成二进制码流。</p><h3 id="其他概念"><a href="#其他概念" class="headerlink" title="其他概念"></a>其他概念</h3><h4 id="声道（Channel）"><a href="#声道（Channel）" class="headerlink" title="声道（Channel）"></a>声道（Channel）</h4><p>单声道产生一组声波数据，双声道（立体声）产生两组声波数据。</p><p>采样率44.1kHZ、位深度16bit的1分钟立体声PCM数据有多大？</p><ul><li>采样率 * 位深度 * 声道数 * 时间</li><li><em>44100 * 16 * 2 * 60 / 8 ≈ 10.34MB</em></li></ul><p>1分钟10.34MB，这对于大部分用户来说是不能接受的。要想在不改变音频时长的前提下，降低音频数据的大小，只有2种方法：降低采样指标、压缩。降低采样指标是不可取的，会导致音频质量下降，用户体验变差，因此专家们研发了各种压缩方案。</p><h4 id="比特率"><a href="#比特率" class="headerlink" title="比特率"></a>比特率</h4><p><strong>比特率</strong>（Bit Rate），指单位时间内传输或处理的比特数量，单位是：比特每秒（bit/s或bps），还有：千比特每秒（Kbit/s或Kbps）、兆比特每秒（Mbit/s或Mbps）、吉比特每秒（Gbit/s或Gbps）、太比特每秒（Tbit/s或Tbps）。</p><p>采样率44.1kHZ、位深度16bit的立体声PCM数据的比特率是多少？</p><ul><li>采样率 * 位深度 * 声道数</li><li><em>44100 * 16 * 2 = 1411.2Kbps</em></li></ul><p>通常，采样率、位深度越高，数字化音频的质量就越好。从比特率的计算公式可以看得出来：比特率越高，数字化音频的质量就越好。</p><h4 id="信噪比"><a href="#信噪比" class="headerlink" title="信噪比"></a>信噪比</h4><p><strong>信噪比</strong>（Signal-to-noise ratio，SNR，S/N，讯噪比），指信号与噪声的比例，用于比较所需信号的强度与背景噪声的强度，以分贝（dB）为单位。</p><p>位深度限制了信噪比的最大值，它们的关系如下表所示。</p><table><thead><tr><th>位深度</th><th>信噪比</th></tr></thead><tbody><tr><td>4</td><td>24.08</td></tr><tr><td>8</td><td>48.16</td></tr><tr><td>11</td><td>66.22</td></tr><tr><td>12</td><td>72.24</td></tr><tr><td>16</td><td>96.33</td></tr><tr><td>18</td><td>108.37</td></tr><tr><td>20</td><td>120.41</td></tr><tr><td>24</td><td>144.49</td></tr><tr><td>32</td><td>192.66</td></tr><tr><td>48</td><td>288.99</td></tr><tr><td>64</td><td>385.32</td></tr></tbody></table><h2 id="音频的编码与解码"><a href="#音频的编码与解码" class="headerlink" title="音频的编码与解码"></a>音频的编码与解码</h2><h3 id="编码（Encode）"><a href="#编码（Encode）" class="headerlink" title="编码（Encode）"></a>编码（Encode）</h3><p>PCM数据可以理解为是：<strong>未经压缩的原始音频数据</strong>，体积比较大，为了更便于存储和传输，一般都会使用某种<strong>音频编码</strong>对它进行编码压缩，然后再存成某种<strong>音频文件格式</strong>。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210315203502644-1869060401.png" alt="编码"></p><p>压缩分为<strong>无损</strong>压缩和<strong>有损</strong>压缩。</p><ul><li><strong>无损</strong>压缩<ul><li>解压后<strong>可以</strong>完全还原出原始数据</li><li>压缩比<strong>小</strong>，体积<strong>大</strong></li></ul></li><li><strong>有损</strong>压缩<ul><li>解压后<strong>不能</strong>完全还原出原始数据，会丢失一部分信息</li><li>压缩比<strong>大</strong>，体积<strong>小</strong></li><li>压缩比越大，丢失的信息就越多，还原后的信号失真就会越大</li><li>一般是通过<strong>舍弃原始数据中对人类听觉不重要的部分</strong>，达成压缩成较小文件的目的</li></ul></li><li>压缩比 = 未压缩大小 / 压缩后大小</li></ul><h3 id="解码（Decode）"><a href="#解码（Decode）" class="headerlink" title="解码（Decode）"></a>解码（Decode）</h3><p>当需要播放音频时，得先解码（解压缩）出PCM数据，然后再进行播放。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210315203603424-398158962.png" alt="解码"></p><h2 id="常见的音频编码和文件格式"><a href="#常见的音频编码和文件格式" class="headerlink" title="常见的音频编码和文件格式"></a>常见的音频编码和文件格式</h2><p>需要注意的是：<strong>音频文件格式并不等于音频编码</strong>。比如：</p><ul><li><p><strong>WAV</strong>只是一种文件格式，并不是一种编码</p></li><li><p><strong>FLAC</strong>既是一种文件格式，又是一种编码</p></li></ul><p>下面对常见的音频编码和文件格式做一个简介，以后有需要时再进行详细介绍。</p><table><thead><tr><th>名称</th><th>无损压缩</th><th>文件扩展名</th></tr></thead><tbody><tr><td>Monkey’s Audio</td><td>✔️</td><td>.ape</td></tr><tr><td>FLAC（Free Lossless Audio Codec）</td><td>✔️</td><td>.flac</td></tr><tr><td>ALAC（Apple Lossless Audio Codec）</td><td>✔️</td><td>.m4a/.caf</td></tr><tr><td>MP3（MPEG Audio Layer III）</td><td>❌</td><td>.mp3</td></tr><tr><td>WMA（Windows Media Audio）</td><td>❌</td><td>.wma</td></tr><tr><td>AAC（Advanced Audio Coding）</td><td>❌</td><td>.acc/.mp4/.m4a</td></tr><tr><td>Vorbis</td><td>❌</td><td>.ogg</td></tr><tr><td>Speex</td><td>❌</td><td>.spx</td></tr><tr><td>Opus</td><td>❌</td><td>.opus</td></tr><tr><td>Ogg</td><td></td><td>.ogg</td></tr><tr><td>WAV（Waveform Audio File Format）</td><td></td><td>.wav</td></tr><tr><td>AIFF（Audio Interchange File Format）</td><td></td><td>.aiff、.aif</td></tr></tbody></table><h3 id="无损"><a href="#无损" class="headerlink" title="无损"></a>无损</h3><h4 id="Monkey’s-Audio"><a href="#Monkey’s-Audio" class="headerlink" title="Monkey’s Audio"></a>Monkey’s Audio</h4><p>Monkey’s Audio，是一种<strong>无损</strong>的音频编码和文件格式，文件扩展名为**.ape**，压缩率一般在55%左右。</p><h4 id="FLAC"><a href="#FLAC" class="headerlink" title="FLAC"></a>FLAC</h4><p>FLAC（Free Lossless Audio Codec），是一种<strong>无损</strong>的音频编码和文件格式，文件扩展名为**.flac**。虽然压缩率稍有不及Monkey’s Audio，但FLAC技术更先进，占用资源更低，有更多的平台及硬件产品支持FLAC。</p><h4 id="ALAC"><a href="#ALAC" class="headerlink" title="ALAC"></a>ALAC</h4><p>ALAC（Apple Lossless Audio Codec），是由Apple开发的一种<strong>无损</strong>的音频编码，文件扩展名为**.m4a<strong>、</strong>.caf**。</p><h3 id="有损"><a href="#有损" class="headerlink" title="有损"></a>有损</h3><h4 id="MP3"><a href="#MP3" class="headerlink" title="MP3"></a>MP3</h4><p>MP3（MPEG Audio Layer III），是非常流行的一种<strong>有损</strong>音频编码和文件格式，文件扩展名为**.mp3**。</p><ul><li>第1版是：MPEG-1 Audio Layer III，属于国际标准<a href="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=22412">ISO/IEC 11172-3</a></li><li>第2版是：MPEG-2 Audio Layer III，属于国际标准<a href="http://www.iso.org/iso/iso_catalogue/catalogue_ics/catalogue_detail_ics.htm?csnumber=26797">ISO/IEC 13818-3</a></li><li>第3版是：MPEG-2.5 Audio Layer III，并不是由MPEG官方开发的，不是公认的标准</li></ul><h4 id="WMA"><a href="#WMA" class="headerlink" title="WMA"></a>WMA</h4><p>WMA（Windows Media Audio），是由Microsoft开发的音频编码和文件格式，文件扩展名为**.wma**。包括4种类型：</p><ul><li>WMA：原始的WMA编解码器，作为MP3的竞争者，属于<strong>有损</strong>音频编码</li><li>WMA Pro：支持更多声道和更高质量的音频，属于<strong>有损</strong>音频编码</li><li>WMA Lossless：属于<strong>无损</strong>音频编码</li><li>WMA Voice：属于<strong>有损</strong>音频编码</li></ul><h4 id="AAC"><a href="#AAC" class="headerlink" title="AAC"></a>AAC</h4><p>AAC（Advanced Audio Coding），是由Fraunhofer IIS、杜比实验室、AT&amp;T、Sony、Nokia等公司共同开发的<strong>有损</strong>音频编码和文件格式，压缩比通常为18:1。</p><p>AAC被设计为MP3格式的后继产品，通常在相同的比特率下可以获得比MP3更高的声音质量，是iPhone、iPod、iPad、iTunes的标准音频格式。</p><p>AAC编码的文件扩展名主要有3种：</p><ul><li><strong>.acc</strong>：传统的AAC编码，使用MPEG-2 Audio Transport Stream（ADTS）容器</li><li><strong>.mp4</strong>：使用了MPEG-4 Part 14的简化版即3GPP Media Release 6 Basic（3gp6）进行封装的AAC编码</li><li><strong>.m4a</strong>：为了区别纯音频MP4文件和包含视频的MP4文件而由Apple公司使用的扩展名<ul><li>Apple iTunes对纯音频MP4文件采用了**.m4a**文件扩展名</li><li>M4A的本质和音频MP4相同，故音频MP4文件可以直接更改文件扩展名为**.m4a**</li></ul></li></ul><h4 id="Vorbis"><a href="#Vorbis" class="headerlink" title="Vorbis"></a>Vorbis</h4><p>Vorbis，是由Xiph.Org基金会开发的一种<strong>有损</strong>音频编码。通常以Ogg作为容器格式，所以常合称为Ogg Vorbis，文件扩展名为**.ogg**。</p><h4 id="Speex"><a href="#Speex" class="headerlink" title="Speex"></a>Speex</h4><p>Speex，是由Xiph.Org基金会开发的一种<strong>有损</strong>音频编码和文件格式，文件扩展名为**.spx**。</p><h4 id="Opus"><a href="#Opus" class="headerlink" title="Opus"></a>Opus</h4><p>Opus，是由Xiph.Org基金会开发的一种<strong>有损</strong>音频编码和文件格式，文件扩展名为**.opus**。用以取代Vorbis和Speedx。经过多次盲听测试，在任何给定的比特率下都比其他标准音频格式具有更高的质量，包括MP3、AAC。</p><h3 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h3><h4 id="Ogg"><a href="#Ogg" class="headerlink" title="Ogg"></a>Ogg</h4><p>Ogg是一种多媒体文件格式，由Xiph.Org基金会所维护，可以纳入各式各样的音视频编码（音频、视频都可以），文件扩展名常为**.ogg**。</p><p>Ogg常用的音频编码有：</p><ul><li>有损压缩：Speex、Vorbis、Opus</li><li>无损压缩：FLAC</li><li>未压缩：PCM</li></ul><h4 id="WAV"><a href="#WAV" class="headerlink" title="WAV"></a>WAV</h4><p>WAV（Waveform Audio File Format），是由IBM和Microsoft开发的音频文件格式，扩展名是**.wav**，通常采用PCM编码，常用于Windows系统中。</p><p><a href="http://soundfile.sapp.org/doc/WaveFormat/">WAV的文件格式</a>如下图所示，前面有44个字节的文件头，紧跟在后面的就是音频数据（比如PCM数据）。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210311190649736-42996929.gif" alt="WAV文件格式"></p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210311190654247-121239230.gif" alt="WAV文件格式"></p><ul><li>NumChannels：声道数</li><li>SampleRate：采样率（Hz）</li><li>ByteRate：每秒多少个字节（Byte/s）</li><li>BitsPerSample：位深度</li></ul><h4 id="AIFF"><a href="#AIFF" class="headerlink" title="AIFF"></a>AIFF</h4><p>AIFF（Audio Interchange File Format），由Apple开发的音频文件格式，扩展名是**.aiff<strong>、</strong>.aif**。跟WAV一样，通常采用PCM编码，常用于Mac系统中。</p><h3 id="有损和无损"><a href="#有损和无损" class="headerlink" title="有损和无损"></a>有损和无损</h3><p>根据采样率和位深度可以得知：相对于自然界的信号，音频编码最多只能做到无限接近，任何数字音频编码方案都是有损的，因为无法完全还原。目前能够达到最高保真水平的就是PCM编码，因此，PCM约定俗成叫做<strong>无损</strong>音频编码，被广泛用于素材保存及音乐欣赏，CD、DVD以及常见的<strong>WAV</strong>文件中均有应用。</p><p>但并不意味着PCM就能够确保信号绝对保真，PCM也只能做到最大程度的无限接近。我们习惯性的把MP3列入<strong>有损</strong>音频编码范畴，是相对于PCM编码的。要做到真正的无损是困难的，就像用数字去表达圆周率，不管精度多高，也只是无限接近，而不是真正等于圆周率的值。</p><p><a href="https://www.cnblogs.com/mjios/p/14466420.html">转自：M了个J—【秒懂音视频开发】03_重识音频 https://www.cnblogs.com/mjios/p/14466420.html</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> iOS音视频开发 </category>
          
          <category> FFmpeg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS, FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS音视频开发（三）Qt基础</title>
      <link href="/2021/08/10/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E4%B8%89Qt%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/08/10/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E4%B8%89Qt%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="pro文件的配置"><a href="#pro文件的配置" class="headerlink" title=".pro文件的配置"></a>.pro文件的配置</h2><h3 id="跨平台配置"><a href="#跨平台配置" class="headerlink" title="跨平台配置"></a>跨平台配置</h3><p>之前我们分别在<a href="https://www.cnblogs.com/mjios/p/14465178.html#toc_title_10">Windows</a>、<a href="https://www.cnblogs.com/mjios/p/14482571.html#toc_title_8">Mac</a>环境的Qt项目中集成了FFmpeg。</p><p>可以发现在**.pro<strong>文件的配置中，FFmpeg库在Mac、Windows上的位置是有所差异的。这样就会导致</strong>.pro**文件无法跨平台使用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># windows</span></span><br><span class="line">INCLUDEPATH += F:/Dev/ffmpeg-4.3.2/include</span><br><span class="line"></span><br><span class="line"><span class="comment"># mac</span></span><br><span class="line">INCLUDEPATH += /usr/<span class="built_in">local</span>/Cellar/ffmpeg/4.3.2/include</span><br></pre></td></tr></table></figure><p>为了实现跨平台配置，可以在配置前面加上<strong>平台标识的前缀</strong>，表示这个配置只会在对应的平台生效。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># windows</span></span><br><span class="line">win32:INCLUDEPATH += F:/Dev/ffmpeg-4.3.2/include</span><br><span class="line">win32:LIBS += -LF:/Dev/ffmpeg-4.3.2/lib \</span><br><span class="line">              -lavcodec \</span><br><span class="line">              -lavdevice \</span><br><span class="line">              -lavfilter \</span><br><span class="line">              -lavformat \</span><br><span class="line">              -lavutil \</span><br><span class="line">              -lpostproc \</span><br><span class="line">              -lswscale \</span><br><span class="line">              -lswresample</span><br><span class="line"></span><br><span class="line"><span class="comment"># mac</span></span><br><span class="line">macx:INCLUDEPATH += /usr/<span class="built_in">local</span>/Cellar/ffmpeg/4.3.2/include</span><br><span class="line">macx:LIBS += -L/usr/<span class="built_in">local</span>/Cellar/ffmpeg/4.3.2/lib \</span><br><span class="line">            -lavcodec \</span><br><span class="line">            -lavdevice \</span><br><span class="line">            -lavfilter \</span><br><span class="line">            -lavformat \</span><br><span class="line">            -lavutil \</span><br><span class="line">            -lpostproc \</span><br><span class="line">            -lswscale \</span><br><span class="line">            -lswresample \</span><br><span class="line">            -lavresample</span><br><span class="line"></span><br><span class="line"><span class="comment"># linux</span></span><br><span class="line"><span class="comment"># linux:INCLUDEPATH += ...</span></span><br><span class="line"><span class="comment"># linux:LIBS += ...</span></span><br></pre></td></tr></table></figure><p>以后针对每个平台的配置可能会比较多，可以使用大括号来简化。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># windows</span></span><br><span class="line">win32 &#123;</span><br><span class="line">    INCLUDEPATH += F:/Dev/ffmpeg-4.3.2/include</span><br><span class="line">    LIBS += -LF:/Dev/ffmpeg-4.3.2/lib \</span><br><span class="line">            -lavcodec \</span><br><span class="line">            -lavdevice \</span><br><span class="line">            -lavfilter \</span><br><span class="line">            -lavformat \</span><br><span class="line">            -lavutil \</span><br><span class="line">            -lpostproc \</span><br><span class="line">            -lswscale \</span><br><span class="line">            -lswresample</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># mac</span></span><br><span class="line">macx &#123;</span><br><span class="line">    INCLUDEPATH += /usr/<span class="built_in">local</span>/Cellar/ffmpeg/4.3.2/include</span><br><span class="line">    LIBS += -L/usr/<span class="built_in">local</span>/Cellar/ffmpeg/4.3.2/lib \</span><br><span class="line">            -lavcodec \</span><br><span class="line">            -lavdevice \</span><br><span class="line">            -lavfilter \</span><br><span class="line">            -lavformat \</span><br><span class="line">            -lavutil \</span><br><span class="line">            -lpostproc \</span><br><span class="line">            -lswscale \</span><br><span class="line">            -lswresample \</span><br><span class="line">            -lavresample</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><p>可以将公共的信息抽取成变量，然后使用**$${}**去访问。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mac</span></span><br><span class="line">macx &#123;</span><br><span class="line">    FFMPEG_HOME = /usr/<span class="built_in">local</span>/Cellar/ffmpeg/4.3.2</span><br><span class="line">    INCLUDEPATH += $<span class="variable">$&#123;FFMPEG_HOME&#125;</span>/include</span><br><span class="line">    LIBS += -L$<span class="variable">$&#123;FFMPEG_HOME&#125;</span>/lib \</span><br><span class="line">            -lavcodec \</span><br><span class="line">            -lavdevice \</span><br><span class="line">            -lavfilter \</span><br><span class="line">            -lavformat \</span><br><span class="line">            -lavutil \</span><br><span class="line">            -lpostproc \</span><br><span class="line">            -lswscale \</span><br><span class="line">            -lswresample \</span><br><span class="line">            -lavresample</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取系统环境变量"><a href="#读取系统环境变量" class="headerlink" title="读取系统环境变量"></a>读取系统环境变量</h3><p>也可以通过**$$()<strong>读取系统的环境变量。比如，我的Windows中有个叫做</strong>JAVA_HOME**的环境变量。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210312114416906-1759603181.png" alt="环境变量"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用message打印环境变量JAVA_HOME的值</span></span><br><span class="line">message($$(JAVA_HOME))</span><br></pre></td></tr></table></figure><p>最后可以在<strong>概要信息</strong>处看到<strong>JAVA_HOME</strong>的打印结果。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210312114808876-2096989790.png" alt="概要信息"></p><h2 id="控件的基本使用"><a href="#控件的基本使用" class="headerlink" title="控件的基本使用"></a>控件的基本使用</h2><p>为了更好地学习Qt控件的使用，建议创建项目时先不要生成ui文件。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210304194032371-721491748.png" alt="不生成ui文件"></p><p>打开<strong>mainwindow.cpp</strong>，在MainWindow的构造函数中编写界面的初始化代码。</p><h3 id="窗口设置"><a href="#窗口设置" class="headerlink" title="窗口设置"></a>窗口设置</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent) &#123;</span><br><span class="line">    <span class="comment">// 设置窗口标题</span></span><br><span class="line">    <span class="built_in">setWindowTitle</span>(<span class="string">&quot;主窗口&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置窗口大小</span></span><br><span class="line">    <span class="comment">// 窗口可以通过拖拽边缘进行自由伸缩</span></span><br><span class="line"><span class="comment">//    resize(400, 400);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置窗口的固定大小</span></span><br><span class="line">    <span class="comment">// 窗口不能通过拖拽边缘进行自由伸缩</span></span><br><span class="line">    <span class="built_in">setFixedSize</span>(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置窗口的位置</span></span><br><span class="line">    <span class="comment">// 以父控件的左上角为坐标原点</span></span><br><span class="line">    <span class="comment">// 没有父控件，就以屏幕的左上角作为坐标原点</span></span><br><span class="line">    <span class="built_in">move</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Qt坐标系如下图所示。<br><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210304194034450-1153331879.png" alt="Qt坐标系"></p><h3 id="添加子控件"><a href="#添加子控件" class="headerlink" title="添加子控件"></a>添加子控件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建按钮</span></span><br><span class="line">QPushButton *btn = <span class="keyword">new</span> QPushButton;</span><br><span class="line"><span class="comment">// 设置按钮的文字</span></span><br><span class="line">btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;登录&quot;</span>);</span><br><span class="line"><span class="comment">// 设置父控件为当前窗口</span></span><br><span class="line">btn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">// 设置按钮的位置和大小</span></span><br><span class="line">btn-&gt;<span class="built_in">move</span>(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">btn-&gt;<span class="built_in">resize</span>(<span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建第2个按钮</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;注册&quot;</span>, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p><em>new</em>出来的Qt控件是<strong>不需要</strong>程序员手动<em>delete</em>的，Qt内部会自动管理内存：当父控件销毁时，会顺带销毁子控件。</p><h2 id="信号与槽"><a href="#信号与槽" class="headerlink" title="信号与槽"></a>信号与槽</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li>信号（Signal）：比如点击按钮就会发出一个点击信号</li><li>槽（Slot）：一般也叫槽函数，是用来处理信号的函数</li><li>官方文档参考：<a href="https://doc.qt.io/qt-5/signalsandslots.html">Signals &amp; Slots</a></li></ul><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210304194036232-2086622242.png" alt="信号与槽"></p><p>上图中的效果是：</p><ul><li>Object1发出信号signal1，交给Object2的槽slot1、slot2去处理<ul><li>Object1是信号的发送者，Object2是信号的接收者</li></ul></li><li>Object1发出信号signal2，交给Object4的槽slot1去处理<ul><li>Object1是信号的发送者，Object4是信号的接收者</li></ul></li><li>Object3发出信号signal1，交给Object4的槽slot3去处理<ul><li>Object3是信号的发送者，Object4是信号的接收者</li></ul></li><li>1个信号可以由多个槽进行处理，1个槽可以处理多个信号</li></ul><p>通过connect函数可以将<strong>信号的发送者</strong>、<strong>信号</strong>、<strong>信号的接收者</strong>、<strong>槽</strong>连接在一起。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(信号的发送者, 信号, 信号的接收者, 槽);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比如点击按钮，关闭当前窗口</span></span><br><span class="line"><span class="comment">// btn发出clicked信号，就会调用this的close函数</span></span><br><span class="line"><span class="built_in">connect</span>(btn, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;MainWindow::close);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过disconnect断开连接</span></span><br><span class="line"><span class="built_in">disconnect</span>(btn, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;MainWindow::close);</span><br></pre></td></tr></table></figure><h3 id="自定义信号与槽"><a href="#自定义信号与槽" class="headerlink" title="自定义信号与槽"></a>自定义信号与槽</h3><p>信号的发送者和接收者都必须继承自QObject，Qt中的控件最终都是继承自QObject，比如QMainWindow、QPushButton等。</p><h4 id="信号的发送者"><a href="#信号的发送者" class="headerlink" title="信号的发送者"></a>信号的发送者</h4><ul><li>sender.h<ul><li><strong>Q_OBJECT</strong>用以支持自定义信号和槽</li><li>自定义的信号需要写在**signals:**下面</li><li>自定义的信号只需要声明，不需要实现</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SENDER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SENDER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sender</span> :</span> <span class="keyword">public</span> QObject &#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Sender</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义信号</span></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exit</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// SENDER_H</span></span></span><br></pre></td></tr></table></figure><ul><li>sender.cpp</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sender.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Sender::<span class="built_in">Sender</span>(QObject *parent) : <span class="built_in">QObject</span>(parent) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="信号的接收者"><a href="#信号的接收者" class="headerlink" title="信号的接收者"></a>信号的接收者</h4><ul><li>receiver.h<ul><li>自定义的槽建议写在**public slots:**下面</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> RECEIVER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RECEIVER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> :</span> <span class="keyword">public</span> QObject &#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Receiver</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义槽</span></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleExit</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// RECEIVER_H</span></span></span><br></pre></td></tr></table></figure><ul><li>receiver.cpp</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;receiver.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">Receiver::<span class="built_in">Receiver</span>(QObject *parent) : <span class="built_in">QObject</span>(parent) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现槽函数，编写处理信号的代码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Receiver::handleExit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Receiver::handleExit()&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><ul><li>mainwindow.h</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span> :</span> <span class="keyword">public</span> QMainWindow &#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MainWindow</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">MainWindow</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br></pre></td></tr></table></figure><ul><li>mainwindow.cpp</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sender.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;receiver.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent) &#123;</span><br><span class="line">    <span class="comment">// 创建对象</span></span><br><span class="line">    Sender *sender = <span class="keyword">new</span> Sender;</span><br><span class="line">    Receiver *receiver = <span class="keyword">new</span> Receiver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接</span></span><br><span class="line">    <span class="built_in">connect</span>(sender,</span><br><span class="line">            &amp;Sender::exit,</span><br><span class="line">            receiver,</span><br><span class="line">            &amp;Receiver::handleExit);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发出信号</span></span><br><span class="line">    <span class="comment">// 最终会调用Receiver::handleExit函数</span></span><br><span class="line">    emit sender-&gt;<span class="built_in">exit</span>();</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 销毁对象</span></span><br><span class="line">    <span class="keyword">delete</span> sender;</span><br><span class="line">    <span class="keyword">delete</span> receiver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数和返回值"><a href="#参数和返回值" class="headerlink" title="参数和返回值"></a>参数和返回值</h4><p>信号与槽都可以有参数和返回值：</p><ul><li>发信号时的参数会传递给槽</li><li>槽的返回值会返回到发信号的位置</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义信号</span></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义槽</span></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">handleExit</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Receiver::handleExit</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Receiver::handleExit() 10 20</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Receiver::handleExit()&quot;</span> &lt;&lt; a &lt;&lt; b;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发出信号</span></span><br><span class="line"><span class="keyword">int</span> a = emit sender-&gt;<span class="built_in">exit</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="comment">// 30</span></span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; a;</span><br></pre></td></tr></table></figure><p>需要注意的是：信号的参数个数必须大于等于槽的参数个数。比如下面的写法是错误的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义信号</span></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义槽</span></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleExit</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="连接2个信号"><a href="#连接2个信号" class="headerlink" title="连接2个信号"></a>连接2个信号</h3><p>比如下图，连接了Object 1的Signal 1A和Object 2的Signal 2A</p><ul><li>当Object 1发出Signal 1A时，会触发Slot X、Slot Y</li><li>当Object 2发出Signal 2A时，只会触发Slot Y，而不会触发Slot X</li></ul><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210304194037999-1645593613.jpg" alt="连接2个信号"></p><p>可以利用<strong>connect</strong>函数连接2个信号</p><ul><li>当sender发出exit信号时，sender2会发出exit2信号</li><li>当sender2发出exit2信号时，sender并不会发出exit信号</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(sender,</span><br><span class="line">        &amp;Sender::exit,</span><br><span class="line">        sender2,</span><br><span class="line">        &amp;Sender2::exit2);</span><br></pre></td></tr></table></figure><h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3><p>也可以直接使用Lambda处理信号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(sender, &amp;Sender::exit, []() &#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;lambda handle exit&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="ui文件"><a href="#ui文件" class="headerlink" title="ui文件"></a>ui文件</h3><p>如果你的控件是通过ui文件生成的，连接槽函数的步骤会更加简单。</p><p>首先建议给按钮们起个有意义的变量名，比如分别叫做：<strong>loginButton</strong>、<strong>registerButton</strong>。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210312120532888-1172297687.png" alt="起名"></p><p>对着<strong>登录</strong>按钮右键，选择<strong>转为槽</strong>。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210312120732642-1761590808.png" alt="转为槽"></p><p>选择<strong>clicked</strong>信号，然后<strong>OK</strong>。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210312120734734-1927951513.png" alt="clicked"></p><p>此时，Qt Creator已经帮你自动生成了槽函数的声明和实现，当我们点击<strong>登录</strong>按钮时，就会调用这个函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span> :</span> <span class="keyword">public</span> QMainWindow &#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="comment">// 槽函数的声明</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_loginButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 槽函数的实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_loginButton_clicked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;on_loginButton_clicked&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实，认真观察函数名可以发现一个规律，函数名的命名规则是：<em>on</em>_<strong>控件的变量名</strong>_<strong>事件名</strong>。</p><p>于是，我们可以尝试编写以下代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span> :</span> <span class="keyword">public</span> QMainWindow &#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="comment">// 槽函数的声明</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_registerButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 槽函数的实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_registerButton_clicked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;on_registerButton_clicked&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，你点击一下<strong>注册</strong>按钮，会发现成功调用了<em>MainWindow::on_registerButton_clicked</em>函数。</p><p>于是得知：<strong>ui文件中的控件会自动跟符合命名规则的槽函数建立连接</strong>。</p><p>最后，再提示一个知识点：ui文件中的控件可以在代码中通过<em>ui-&gt;变量名</em>访问。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent), <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow) &#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过ui-&gt;访问ui文件中的2个按钮</span></span><br><span class="line">    ui-&gt;loginButton-&gt;<span class="built_in">setFixedSize</span>(<span class="number">100</span>, <span class="number">30</span>);</span><br><span class="line">    ui-&gt;registerButton-&gt;<span class="built_in">setFixedSize</span>(<span class="number">100</span>, <span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/mjios/p/14506905.html">转自：M了个J—【秒懂音视频开发】Qt开发基础https://www.cnblogs.com/mjios/p/14506905.html</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> iOS音视频开发 </category>
          
          <category> FFmpeg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS, FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    
    
    
    
    
    
    
    
    <entry>
      <title>iOS动画框架简述</title>
      <link href="/2021/08/09/iOS%E5%8A%A8%E7%94%BB/iOS%E5%8A%A8%E7%94%BB%E6%A6%82%E8%BF%B0/"/>
      <url>/2021/08/09/iOS%E5%8A%A8%E7%94%BB/iOS%E5%8A%A8%E7%94%BB%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="ios动画与绘图框架"><a href="#ios动画与绘图框架" class="headerlink" title="ios动画与绘图框架"></a>ios动画与绘图框架</h3><p><img src="/2021/08/09/iOS%E5%8A%A8%E7%94%BB/iOS%E5%8A%A8%E7%94%BB%E6%A6%82%E8%BF%B0/animation.png"></p><blockquote><ol><li>UIKit：(UIView动画)最常用的视图框架，封装度最高，都是OC对象。</li><li> CoreAnimation：核心动画，提供强大的2D和3D动画效果。</li><li>CoreGraphics：绘图，纯C的API，使用Quartz2D做引擎。</li><li>CoreText：一种能够对文本格式和文本布局进行精细控制的文本引擎.</li><li>CoreImage：给图片提供各种滤镜处理，比如高斯模糊、锐化等</li><li> OpenGL-ES：主要用于游戏绘制，但它是一套编程规范，具体由设备制造商实现。（OpenCV）</li></ol></blockquote><p>总结：</p><ol><li>核心动画和UIView区别：核心动画作用在CALayer（Core animation layer）上，CALayer从概念上类似UIView，我们可以将UIView看成是一种特殊的CALayer（可以响应事件）。实际上，每一个view都有其对应的layer，这个layer是root layer。</li></ol>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Animation动画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> CoreAnimation </tag>
            
        </tags>
      
    </entry>
    
    
    
    
    
    
    
    <entry>
      <title>Undefined_symbol:_OBJC_CLASS_xxx解决方法</title>
      <link href="/2021/08/06/iOS/Undefined-symbol-OBJC-CLASS/"/>
      <url>/2021/08/06/iOS/Undefined-symbol-OBJC-CLASS/</url>
      
        <content type="html"><![CDATA[<h5 id="错误提示："><a href="#错误提示：" class="headerlink" title="错误提示："></a>错误提示：</h5><ul><li>编译时候发现错误 Undefined symbol: <em>OBJC_CLASS</em>$_xxxxxx</li></ul><h5 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h5><ul><li>xcode的tagerts中的编译文件没有加入.m或者.swift 类文件</li></ul><p><img src="/2021/08/06/iOS/Undefined-symbol-OBJC-CLASS/errorImage.png"></p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h5><ul><li>点击Targets -&gt; Build Phases -&gt; Compile Sources 下面的 + 加号，然后选择.m 或者 .swift 文件点击add,为了快速找到文件，可以在上面搜索框输入文件名</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> iOS Crash Handle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS音视频开发（二）开发库的选择及Mac/Windows环境搭建</title>
      <link href="/2021/08/05/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E4%BA%8C/"/>
      <url>/2021/08/05/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h4 id="一、各平台特有音视频开发库"><a href="#一、各平台特有音视频开发库" class="headerlink" title="一、各平台特有音视频开发库"></a>一、各平台特有音视频开发库</h4><ul><li>iOS：AVFoundation，AudioUnit等</li><li>Android：MediaPlayer、MediaCodec等</li><li>Windows：Directshow等</li></ul><hr><h4 id="二、跨平台开发库：FFmpeg"><a href="#二、跨平台开发库：FFmpeg" class="headerlink" title="二、跨平台开发库：FFmpeg"></a>二、跨平台开发库：<a href="https://ffmpeg.org/">FFmpeg</a></h4><ul><li><p>音视频开发选择基于C语言的FFmpeg</p></li><li><p>GUI图形界面的开发选择基于C++的Qt(QtCreator)</p><hr></li></ul><h4 id="三、Mac环境配置"><a href="#三、Mac环境配置" class="headerlink" title="三、Mac环境配置"></a>三、Mac环境配置</h4><h5 id="1-FFmpeg安装"><a href="#1-FFmpeg安装" class="headerlink" title="1. FFmpeg安装"></a>1. FFmpeg安装</h5><blockquote><ul><li><p>在Mac环境中，直接使用Homebrew安装FFmpeg即可:  brew install ffmpeg</p></li><li><p>FFmpeg版本查看: ffmpeg -version</p></li><li><p>目录结构：</p><ol><li><p>通过brew install安装的软件会存放到 /usr/local/Cellar 目录中，通过以下命令可以打开FFmpeg的安装目录：</p><blockquote><p>cd /usr/local/Cellar/ffmpeg</p></blockquote></li><li><p>bin：有编译好的可执行程序：ffmpeg、ffplay等，可以直接在命令行上使用，比如:</p><blockquote><p> ffplay xx.mp4：可以直接播放某个视频</p><p>ffmpeg -version：可以查看FFmpeg的版本号</p></blockquote></li><li><p>include：开发时需要包含的头文件</p></li><li><p>lib：链接时需要用到的库文件</p></li></ol></li></ul></blockquote><hr><h5 id="2-Qt安装"><a href="#2-Qt安装" class="headerlink" title="2. Qt安装"></a>2. Qt安装</h5><blockquote><ul><li><p>通过<em>brew install</em>安装Qt，最终被安装在/usr/local/Cellar/qt目录: </p><blockquote><p>brew install qt</p></blockquote></li><li><p>通过<em>brew install –cask</em>安装Qt Creator，最终被安装在/usr/local/Caskroom/qt-creator目录</p><blockquote><p>brew install –cask qt-creator</p></blockquote></li><li><p>相关配置：通过brew安装的Qt和Qt Creator是分开的，需要在Qt Creator中设置一下Qt的路径,将两者联系起来</p></li></ul></blockquote><h6 id="具体配置流程："><a href="#具体配置流程：" class="headerlink" title="具体配置流程："></a>具体配置流程：</h6><p>​    点击Qt Creator的偏好设置：在Qt Versions中添加本地对应的Qt路径</p><p><img src="/2021/08/05/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E4%BA%8C/liuchen1.png"></p><p>​    <img src="/2021/08/05/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E4%BA%8C/liuchen2.png"></p><p>Qt的路径是在/usr/local中，默认是隐藏的:</p><ul><li>可以使用快捷键Command + Shift + .显示隐藏文件和文件夹</li><li>可以使用快捷键Command + Shift + G手动输入Qt的文件夹：/usr/local/Cellar/qt</li></ul><p><img src="/2021/08/05/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E4%BA%8C/liuchen3.png"></p><p>选择bin目录下的qmake:</p><p><img src="/2021/08/05/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E4%BA%8C/liuchen4.png"></p><p><img src="/2021/08/05/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E4%BA%8C/liuchen5.png"></p><p>设置64bit那一项为默认开发环境:在Kits选项下设置默认的开发环境，并选择之前设置的指定版本的Qt</p><p><img src="/2021/08/05/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E4%BA%8C/liuchen6.png"></p><p>滚动到底下，选择刚才设置的Qt版本:</p><p><img src="/2021/08/05/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E4%BA%8C/liuchen7.png"></p><hr><h5 id="3-开发"><a href="#3-开发" class="headerlink" title="3. 开发"></a>3. 开发</h5><h6 id="3-1新建项目：如图选择"><a href="#3-1新建项目：如图选择" class="headerlink" title="3.1新建项目：如图选择"></a>3.1新建项目：如图选择</h6><p><img src="/2021/08/05/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E4%BA%8C/develop1.png"></p><p>运行后的效果如下图所示：</p><p><img src="/2021/08/05/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E4%BA%8C/develop2.png"></p><h6 id="3-2-集成FFmpeg到Qt项目中"><a href="#3-2-集成FFmpeg到Qt项目中" class="headerlink" title="3.2 集成FFmpeg到Qt项目中"></a>3.2 集成FFmpeg到Qt项目中</h6><p>集成FFmpeg的操作，修改.pro文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 设置头文件路径</span><br><span class="line">INCLUDEPATH += /usr/local/Cellar/ffmpeg/4.4/include</span><br><span class="line"></span><br><span class="line"># 设置库文件路径</span><br><span class="line">LIBS += -L/usr/local/Cellar/ffmpeg/4.3.2/lib \</span><br><span class="line">        -lavcodec \</span><br><span class="line">        -lavdevice \</span><br><span class="line">        -lavfilter \</span><br><span class="line">        -lavformat \</span><br><span class="line">        -lavutil \</span><br><span class="line">        -lpostproc \</span><br><span class="line">        -lswscale \</span><br><span class="line">        -lswresample \</span><br><span class="line">        -lavresample</span><br></pre></td></tr></table></figure><p>打印FFmpeg版本号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;QApplication&gt;</span><br><span class="line">#include &lt;QDebug&gt;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">#include &lt;libavcodec/avcodec.h&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[]) &#123;</span><br><span class="line">    // 打印版本号</span><br><span class="line">    qDebug() &lt;&lt; av_version_info();</span><br><span class="line"></span><br><span class="line">    QApplication a(argc, argv);</span><br><span class="line">    MainWindow w;</span><br><span class="line">    w.show();</span><br><span class="line">    return a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/05/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E4%BA%8C/develop3.png"></p><hr><hr><h4 id="Windows环境配置"><a href="#Windows环境配置" class="headerlink" title="Windows环境配置"></a>Windows环境配置</h4><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>网上已经有编译好的FFmpeg，目前最新的Release版本是4.3.2，可以直接下载到项目中进行开发使用。</p><ul><li><a href="https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-github">Windows版本下载</a>：<a href="https://github.com/GyanD/codexffmpeg/releases/download/4.3.2-2021-02-27/ffmpeg-4.3.2-2021-02-27-full_build-shared.7z">ffmpeg-4.3.2-2021-02-27-full_build-shared.7z</a></li><li>源码下载：<a href="https://ffmpeg.org/releases/ffmpeg-4.3.2.tar.xz">ffmpeg-4.3.2.tar.xz</a><ul><li>网上编译好的FFmpeg一般是完整版，体积比较大</li><li>日后我们可以根据实际需要，对FFmpeg的源码进行裁剪后再进行重新编译 </li></ul></li></ul><p>解压<strong>ffmpeg-4.3.2-2021-02-27-full_build-shared.7z</strong>文件后，目录结构如下所示：</p><ul><li><strong>bin</strong><ul><li>有编译好的可执行程序：ffmpeg.exe、ffplay.exe、ffprobe.exe，可以直接在命令行上使用，比如<ul><li><em>ffplay xx.mp4</em>：可以直接播放某个视频</li><li><em>ffmpeg -version</em>：可以查看FFmpeg的版本号</li></ul></li><li>有运行时需要用到的动态库文件（*.dll）</li></ul></li><li><strong>doc</strong>：FFmpeg的使用文档</li><li><strong>include</strong>：开发时需要包含的头文件</li><li><strong>lib</strong>：链接时需要用到的库文件</li></ul><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210303100109685-401144677.png" alt="目录结构"></p><h2 id="Qt"><a href="#Qt" class="headerlink" title="Qt"></a>Qt</h2><p>如果要想开发一个播放器，肯定得编写界面，同样为了保证跨平台开发，这里采用的GUI库是<a href="https://www.qt.io/">Qt</a>，官方的开发工具QtCreator是跨平台的（支持Windows、Mac、Linux）。Qt开发采用的编程语言是C++。</p><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><p>本教程中选择<em>5.14.2</em>版本（从<em>5.15</em>版本开始是收费版本）。</p><ul><li>下载地址：<a href="https://download.qt.io/archive/qt/5.14/5.14.2/">https://download.qt.io/archive/qt/5.14/5.14.2/</a></li><li>Windows系统选择下载：<a href="https://download.qt.io/archive/qt/5.14/5.14.2/qt-opensource-windows-x86-5.14.2.exe">qt-opensource-windows-x86-5.14.2.exe</a></li></ul><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210301223356865-1879489588.png" alt="qt安装包"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210301223446602-376823512.png" alt="Next"></p><p>需要先注册，再进行登录。<br><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210301223448612-1507195124.png" alt="先注册，再登录"></p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210301223450410-1093878860.png" alt="下一步"></p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210301223452846-307812161.png" alt="下一步"></p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210301223454495-331255702.png" alt="选择安装路径"></p><p>勾选MinGW 64bit编译器（我电脑的系统是64bit）。<br><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210301223456117-1313660492.png" alt="勾选编译器"></p><p>如果后期想阅读Qt源码，就选择勾选Qt源码。<br><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210303154753827-460388891.png" alt="勾选源码"></p><p>默认已经勾选了QtCreator。<br><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210301223457841-1880158681.png" alt="默认已经勾选QtCreator"></p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210301223459568-105685695.png" alt="许可协议"></p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210301223501405-1820014781.png" alt="开始菜单快捷方式"></p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210301223503444-2105003129.png" alt="安装"></p><h3 id="解决控制台中文乱码"><a href="#解决控制台中文乱码" class="headerlink" title="解决控制台中文乱码"></a>解决控制台中文乱码</h3><p>工具 -&gt; 选项。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210301223542462-1404459733.png"></p><p>文本编辑器 -&gt; 行为 -&gt; 文本编码 -&gt; 默认编码。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210301223544116-1548051098.png" alt="设置为UTF-8"></p><h2 id="开发初探"><a href="#开发初探" class="headerlink" title="开发初探"></a>开发初探</h2><h3 id="第一个Qt项目"><a href="#第一个Qt项目" class="headerlink" title="第一个Qt项目"></a>第一个Qt项目</h3><p>打开QtCreator，文件 -&gt; 新建文件或项目。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210303100337496-1819818685.png" alt="新建项目"></p><p>Application -&gt; Qt Widgets Application。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210303100339554-1027670443.png" alt="Qt Widgets Application"></p><p>设置项目名称和项目的存放路径。<br><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210303100341452-1760777115.png" alt="项目名称和项目的存放路径"><br><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210303100344890-990895790.png" alt="下一步"></p><p>QtCreator默认会创建一个MainWindow类（主窗口）。<br><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210303100452551-1579725199.png" alt="下一步"><br><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210303100454228-2065381027.png" alt="下一步"></p><p>勾选MinGW编译器。<br><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210303100455958-1241447130.png" alt="下一步"><br><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210303100458057-274318672.png" alt="完成"></p><p>双击打开<strong>mainwindow.ui</strong>文件，可以往右边的主窗口中添加一些界面元素（比如按钮）。<br><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210303100509272-1615603672.png" alt="双击打开mainwindow.ui文件"><br><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210303100511129-245180460.png" alt="拖拽"></p><p>点击左下角的运行按钮（绿色三角形），即可看到一个窗口界面，这个就是QtCreator默认创建的主窗口（MainWindow对象）。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210303100520847-1054974024.png"><br><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210303100522293-1578268250.png"></p><h3 id="消除警告"><a href="#消除警告" class="headerlink" title="消除警告"></a>消除警告</h3><p>每次运行Qt程序，你的控制台可能都会出现以下警告信息：<strong>QT_DEVICE_PIXEL_RATIO</strong>已经过期。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Warning: QT_DEVICE_PIXEL_RATIO is deprecated. Instead use:</span><br><span class="line">   QT_AUTO_SCREEN_SCALE_FACTOR to enable platform plugin controlled per-screen factors.</span><br><span class="line">   QT_SCREEN_SCALE_FACTORS to set per-screen DPI.</span><br><span class="line">   QT_SCALE_FACTOR to set the application global scale factor.</span><br></pre></td></tr></table></figure><p>解决方案：设置环境变量<strong>QT_SCALE_FACTOR</strong>为1即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入头文件【也可以不导入，因为&lt;QApplication&gt;中已经包含了&lt;QByteArray&gt;】</span></span><br><span class="line"><span class="comment">// #include &lt;QByteArray&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过qputenv函数设置QT_SCALE_FACTOR为1</span></span><br><span class="line">    <span class="built_in">qputenv</span>(<span class="string">&quot;QT_SCALE_FACTOR&quot;</span>, <span class="built_in">QByteArray</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    MainWindow w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集成FFmpeg到Qt项目中"><a href="#集成FFmpeg到Qt项目中" class="headerlink" title="集成FFmpeg到Qt项目中"></a>集成FFmpeg到Qt项目中</h3><p>在Windows中，我们最终是通过调用FFmpeg动态库（dll）中的函数来操作音视频数据，使用dll的其中一种方式是需要用到3种文件：</p><ul><li><strong>.h</strong>：头文件（Header File）<ul><li>包含了函数的声明</li><li>通过*#include*去导入相应的头文件</li></ul></li><li><strong>.dll</strong>：动态链接库（Dynamic Link Library）<ul><li>包含了函数的具体实现代码</li><li>Windows程序会在运行过程中，动态调用dll中的函数</li></ul></li><li><strong>.lib</strong>或**.dll.a**：（动态链接库的）导入库（Import Library）<ul><li><strong>.lib</strong>：用于MSVC编译器中</li><li><strong>.dll.a</strong>：用于MinGW编译器中</li><li>包含了dll中函数的入口，用于辅助找到并调用dll中的函数</li><li>最终需要链接到Windows程序中（比如合并到exe文件中）</li></ul></li></ul><p>值得一提的是，在Windows中，静态链接库（Static Link Library）的扩展名也是**.lib<strong>、</strong>.dll.a**。静态链接库和导入库的区别是：</p><ul><li>静态链接库：包含了函数的具体实现代码</li><li>导入库：不包含函数的具体实现代码（函数的具体实现代码存储在dll中）</li></ul><h4 id="修改-pro-文件"><a href="#修改-pro-文件" class="headerlink" title="修改**.pro**文件"></a>修改**.pro**文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置头文件的目录，以便编译器能够找到头文件</span></span><br><span class="line">INCLUDEPATH += %FFMPEG_HOME%/include</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置导入库的目录和需要链接的导入库</span></span><br><span class="line">LIBS += -L%FFMPEG_HOME%/lib \</span><br><span class="line">        -lavcodec \</span><br><span class="line">        -lavdevice \</span><br><span class="line">        -lavfilter \</span><br><span class="line">        -lavformat \</span><br><span class="line">        -lavutil \</span><br><span class="line">        -lpostproc \</span><br><span class="line">        -lswscale \</span><br><span class="line">        -lswresample</span><br></pre></td></tr></table></figure><ul><li>#号后面的内容是注释</li><li><strong>%FFMPEG_HOME%<strong>表示</strong>ffmpeg-4.3.2-2021-02-27-full_build-shared.7z</strong>解压后的目录<ul><li>需要根据你的实际情况修改为真实的路径</li></ul></li><li><strong>-L</strong>：设置导入库的目录，以便编译器能够找到导入库</li><li><strong>-l</strong>：设置需要链接的导入库名称<ul><li>导入库名称需要去掉文件名前面的lib，比如libavcodec.dll.a就写成avcodec</li></ul></li></ul><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><p>在<strong>main.cpp</strong>中调用<em>av_version_info</em>函数，获取FFmpeg的版本信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了使用qDebug函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// FFmpeg是C语言库</span></span><br><span class="line"><span class="comment">// 有了extern &quot;C&quot;，才能在C++中导入C语言函数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 打印版本信息</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="built_in">av_version_info</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    MainWindow w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="拷贝dll文件"><a href="#拷贝dll文件" class="headerlink" title="拷贝dll文件"></a>拷贝dll文件</h4><p>Qt程序编译成功后，会生成一个exe文件</p><ul><li>exe是Windows中的一种可执行文件</li><li>我们编写的程序代码最终都存在了exe文件中</li></ul><p>为了保证exe在运行时能成功调用FFmpeg的函数，那么就得让exe能够找到FFmpeg的dll文件（动态库文件）。可以将**%FFMPEG_HOME%/bin**目录中的所有dll文件拷贝到exe文件所在的目录中，exe在运行的时候，能自动找到跟它同一目录下的dll文件。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210303100542709-187646790.png"></p><p>可以通过查看构建目录得知exe文件所在的目录。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210303100555098-1663556108.png"></p><p>运行程序后，如果能在控制台看到<strong>4.3.2</strong>字样的输出信息，说明FFmpeg已经集成成功。</p><p><img src="https://img2020.cnblogs.com/blog/497279/202103/497279-20210303100603623-1729439411.png"></p><h4 id="根据dll在Windows中的搜索顺序，将所需的动态库设置成“系统动态库”"><a href="#根据dll在Windows中的搜索顺序，将所需的动态库设置成“系统动态库”" class="headerlink" title="根据dll在Windows中的搜索顺序，将所需的动态库设置成“系统动态库”"></a>根据dll在Windows中的搜索顺序，将所需的动态库设置成“系统动态库”</h4><p>exe在寻找dll文件时，大概按照以下优先级顺序去查找（这里只列出了大概的搜索路径，并没有写全）：</p><ol><li><p>exe所在的目录</p></li><li><p>Windows的System目录</p><ul><li>C:/Windows/System</li><li>C:/Windows/System32</li></ul></li><li><p>Windows目录</p><ul><li>C:/Windows</li></ul></li><li><p><strong>环境变量Path中的路径</strong></p><ul><li><p>所以可以考虑将**%FFMPEG_HOME%/bin**目录配置到Path变量中</p></li><li><p>置于如何配置Windows的环境变量Path，这是基本开发常识了，就不再讲解了</p><blockquote><p>Windows的环境变量Path: 此电脑—-属性—–高级—-环境变量：添加路径</p></blockquote></li></ul></li></ol><p>第1种方式需要在每一个Qt程序中都拷贝一份FFmpeg的dll文件，第2~4种方式可以让多个Qt程序共用同一份FFmpeg的dll文件。</p><h3 id="pro文件"><a href="#pro文件" class="headerlink" title=".pro文件"></a>.pro文件</h3><p>.pro文件是Qt项目的   <strong>主配置文件</strong>  。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 包含了core、gui两个模块</span></span><br><span class="line">QT       += core gui</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 高于4版本，就包含widgets模块</span></span><br><span class="line">greaterThan(QT_MAJOR_VERSION, 4): QT += widgets</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启用c++11版本语法</span></span><br><span class="line">CONFIG += c++11</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 源代码</span></span><br><span class="line">SOURCES += \</span><br><span class="line">    main.cpp \</span><br><span class="line">    mainwindow.cpp</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 头文件</span></span><br><span class="line">HEADERS += \</span><br><span class="line">    mainwindow.h</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ui文件</span></span><br><span class="line">FORMS += \</span><br><span class="line">    mainwindow.ui</span><br></pre></td></tr></table></figure><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ul><li>字体缩放：Ctrl + 鼠标滚轮</li><li>帮助文档：F1</li><li>注释：Ctrl + /</li><li>同名的.h、.cpp文件之间切换：F4</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> iOS音视频开发 </category>
          
          <category> FFmpeg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS, FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    
    
    
    
    <entry>
      <title>iOS多次移除Observer或者移除不存在的Observer导致崩溃的3中解决方案</title>
      <link href="/2021/08/05/iOS/iOSObserverCrashHandle/"/>
      <url>/2021/08/05/iOS/iOSObserverCrashHandle/</url>
      
        <content type="html"><![CDATA[<h4 id="问题引述：使用Observer时遇到Cannot-remove-an-observer-XXXXXXXX-for-the-key-path-“aObserverName”-from-XXXXXXXX-because-it-is-not-registered-as-an-observer"><a href="#问题引述：使用Observer时遇到Cannot-remove-an-observer-XXXXXXXX-for-the-key-path-“aObserverName”-from-XXXXXXXX-because-it-is-not-registered-as-an-observer" class="headerlink" title="问题引述：使用Observer时遇到Cannot remove an observer XXXXXXXX for the key path “aObserverName” from XXXXXXXX because it is not registered as an observer"></a>问题引述：使用Observer时遇到Cannot remove an observer XXXXXXXX for the key path “aObserverName” from XXXXXXXX because it is not registered as an observer</h4><h5 id="方案一：：利用-try-catch（只能针对删除多次KVO的情况下）"><a href="#方案一：：利用-try-catch（只能针对删除多次KVO的情况下）" class="headerlink" title="方案一：：利用 @try @catch（只能针对删除多次KVO的情况下）"></a>方案一：：利用 @try @catch（只能针对删除多次KVO的情况下）</h5><blockquote><p>利用 @try @catc:这种方法真是很Low,人就会有问题，不过很简单就可以实现。(对于初学者来说，如果不怕麻烦，确实可以使用这种方法)。这种方法只能针对多次删除KVO的处理，原理就是try catch可以捕获异常，不让程序catch。这样就实现了防止多次删除KVO。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@try &#123;</span><br><span class="line">  [appDelegate removeObserver:self forKeyPath:@&quot;kvoState&quot;];</span><br><span class="line">&#125;</span><br><span class="line">@catch (NSException *exception) &#123;</span><br><span class="line">  NSLog(@&quot;多次删除kvo 报错了&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法功能拓展：</p><p>有个简单的方法：给NSObject 增加一个分类，然后利用Runtime 交换系统的 removeObserver方法，在里面添加 @try @catch。</p></blockquote><hr><h5 id="方案二：：利用-模型数组-进行存储记录"><a href="#方案二：：利用-模型数组-进行存储记录" class="headerlink" title="方案二：：利用 模型数组 进行存储记录"></a>方案二：：利用 模型数组 进行存储记录</h5><ul><li>第一步 利用交换方法，拦截到需要的东西</li></ul><ol><li>是在监听哪个对象。</li><li>是在监听的keyPath是什么。</li></ol><ul><li>第二步 存储思路</li></ul><ol><li>我们需要一个模型用来存储哪个对象执行了addObserver、监听的KeyPath是什么。</li><li>我们需要一个数组来存储这个模型。</li></ol><ul><li>第三步 进行存储</li></ul><ol><li>利用runtime 拦截到对象和keyPath,创建模型然后进行赋值模型相应的属性。</li><li>然后存储进数组中去。</li></ol><ul><li>存储之前的检索处理</li></ul><ol><li>在存储之前，为了防止多次addObserver相同的属性，这个时候我们就可以，遍历数组，取出每个一个模型，然后取出模型中的对象，首先判断对象是否一致，然后判断keypath是否一致</li><li>对于添加KVO监听：如果不一致那么就执行利用交换后方法执行addObserver方法。</li><li>对于删除KVO监听: 如果一致那么我们就执行删除监听,否则不执行</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">+ (void)switchMethod</span><br><span class="line">&#123;</span><br><span class="line">    SEL removeSel = @selector(removeObserver:forKeyPath:);</span><br><span class="line">    SEL myRemoveSel = @selector(removeDasen:forKeyPath:);</span><br><span class="line">    Method systemRemoveMethod = class_getClassMethod([self class],removeSel);</span><br><span class="line">    Method DasenRemoveMethod = class_getClassMethod([self class], myRemoveSel);</span><br><span class="line">    method_exchangeImplementations(systemRemoveMethod, DasenRemoveMethod);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    SEL addSel = @selector(addObserver:forKeyPath:options:context:);</span><br><span class="line">    SEL myaddSel = @selector(addDasen:forKeyPath:options:context:);</span><br><span class="line">    Method systemAddMethod = class_getClassMethod([self class],addSel);</span><br><span class="line">    Method DasenAddMethod = class_getClassMethod([self class], myaddSel);</span><br><span class="line">    method_exchangeImplementations(systemAddMethod, DasenAddMethod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 第二种方案，利用私有属性</span><br><span class="line">// 交换后的方法</span><br><span class="line">- (void)removeDasen:(NSObject *)observer forKeyPath:(NSString *)keyPath&#123;</span><br><span class="line"></span><br><span class="line">    NSMutableArray *Observers = [YLObserver sharedInstanceObserve];</span><br><span class="line">    YLObserverData *userPathData = [self observerKeyPath:keyPath];</span><br><span class="line">    // 如果有该key值那么进行删除 ，对于删除KVO监听: 如果一致那么我们就执行删除监听,否则不执行</span><br><span class="line">    if (userPathData) &#123;</span><br><span class="line">        [Observers removeObject:userPathData];</span><br><span class="line">        @try &#123;</span><br><span class="line">            //如果没有写@try @catch 的话，在 dealloc 中，那个被监听的对象（appdelegate）必须要全局变量</span><br><span class="line">            [self removeDasen:observer forKeyPath:keyPath];</span><br><span class="line">        &#125;</span><br><span class="line">        @catch (NSException *exception) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 交换后的方法</span><br><span class="line">/*</span><br><span class="line"> 第一步 利用交换方法，拦截到需要的东西</span><br><span class="line"> 1，是在监听哪个对象。</span><br><span class="line"> 2，是在监听的keyPath是什么。</span><br><span class="line"> */</span><br><span class="line">- (void)addDasen:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context&#123;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     第二步 存储思路</span><br><span class="line">     1，我们需要一个模型用来存储哪个对象执行了addObserver、监听的KeyPath是什么。</span><br><span class="line">     2，我们需要一个数组来存储这个模型。</span><br><span class="line">     */</span><br><span class="line">    YLObserverData *userPathData= [[YLObserverData alloc]initWithObjc:self key:keyPath];</span><br><span class="line">    NSMutableArray *Observers = [YLObserver sharedInstanceObserve];</span><br><span class="line"></span><br><span class="line">    // 如果没有注册，那么才进行注册 第三步 存储之前的检索处理</span><br><span class="line">    if (![self observerKeyPath:keyPath]) &#123;</span><br><span class="line">        /*</span><br><span class="line">         第三步 进行存储</span><br><span class="line">         1，利用runtime 拦截到对象和keyPath,创建模型然后进行赋值模型相应的属性。</span><br><span class="line">         2，然后存储进数组中去。</span><br><span class="line">         */</span><br><span class="line">        [Observers addObject:userPathData];</span><br><span class="line">        [self addDasen:observer forKeyPath:keyPath options:options context:context];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 进行检索，判断是否已经存储了该Key值</span><br><span class="line">- (YLObserverData *)observerKeyPath:(NSString *)keyPath&#123;</span><br><span class="line"></span><br><span class="line">    NSMutableArray *Observers = [YLObserver sharedInstanceObserve];</span><br><span class="line">    for (YLObserverData *data in Observers) &#123;</span><br><span class="line">        if ([data.objc isEqual:self] &amp;&amp; [data.keyPath isEqualToString:keyPath]) &#123;</span><br><span class="line">            return data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="方案三-利用-observationInfo-里私有属性"><a href="#方案三-利用-observationInfo-里私有属性" class="headerlink" title="方案三:利用 observationInfo 里私有属性"></a>方案三:利用 observationInfo 里私有属性</h5><ul><li>第一步 简单介绍下observationInfo属性</li></ul><ol><li>只要是继承与NSObject的对象都有observationInfo属性.</li><li>observationInfo是系统通过分类给NSObject增加的属性。</li><li>分类文件是NSKeyValueObserving.h这个文件</li><li>这个属性中存储有属性的监听者，通知者，还有监听的keyPath，等等KVO相关的属性。</li><li>observationInfo是一个void指针，指向一个包含所有观察者的一个标识信息对象，信息包含了每个监听的观察者,注册时设定的选项等。</li><li>observationInfo结构 (箭头所指是我们等下需要用到的地方)</li></ol><ul><li>第二步 实现方案思路</li></ul><ol><li><p>通过私有属性直接拿到当前对象所监听的keyPath</p></li><li><p>判断keyPath有或者无来实现防止多次重复添加和删除KVO监听。</p></li><li><p>通过Dump Foundation.framework 的头文件，和直接xcode查看observationInfo的结构，发现有一个数组用来存储NSKeyValueObservance对象，经过测试和调试，发现这个数组存储的需要监听的对象中，监听了几个属性，如果监听两个，数组中就是2个对象。比如这是监听两个属性状态下的数组</p></li><li><p>NSKeyValueObservance属性简单说明</p><blockquote><p>_observer属性：里面放的是监听属性的通知这，也就是当属性改变的时候让哪个对象执行observeValueForKeyPath的对象。</p><p>_property 里面的NSKeyValueProperty NSKeyValueProperty存储的有keyPath,其他属性我们用不到，暂时就不说了。</p></blockquote></li><li><p>拿出keyPath</p></li></ol><p>这时候思路就有了，首先拿出_observances数组，然后遍历拿出里面_property对象里面的NSKeyValueProperty下的一个keyPath，然后进行判断需要删除或添加的keyPath是否一致，然后分别进行处理就行了。</p><p><strong>补充：NSKeyValueProperty我当时测试直接kvc取出来的时候发现取不出来，报错，后台直接取keyPath就可以，然后就直接取keyPath了，有知道原因的可以给我说下。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">+ (void)switchMethod</span><br><span class="line">&#123;</span><br><span class="line">    SEL removeSel = @selector(removeObserver:forKeyPath:);</span><br><span class="line">    SEL myRemoveSel = @selector(removeDasen:forKeyPath:);</span><br><span class="line">    Method systemRemoveMethod = class_getClassMethod([self class],removeSel);</span><br><span class="line">    Method DasenRemoveMethod = class_getClassMethod([self class], myRemoveSel);</span><br><span class="line">    method_exchangeImplementations(systemRemoveMethod, DasenRemoveMethod);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    SEL addSel = @selector(addObserver:forKeyPath:options:context:);</span><br><span class="line">    SEL myaddSel = @selector(addDasen:forKeyPath:options:context:);</span><br><span class="line">    Method systemAddMethod = class_getClassMethod([self class],addSel);</span><br><span class="line">    Method DasenAddMethod = class_getClassMethod([self class], myaddSel);</span><br><span class="line">    method_exchangeImplementations(systemAddMethod, DasenAddMethod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 第二种方案，利用私有属性</span><br><span class="line">// 交换后的方法</span><br><span class="line">- (void)removeDasen:(NSObject *)observer forKeyPath:(NSString *)keyPath&#123;</span><br><span class="line"></span><br><span class="line">    // 如果有该key值那么进行删除</span><br><span class="line">    if ([self observerKeyPath:keyPath]) &#123;</span><br><span class="line">        @try &#123;</span><br><span class="line">            //如果没有写@try @catch 的话，在 dealloc 中，那个被监听的对象（appdelegate）必须要全局变量</span><br><span class="line">            [self removeDasen:observer forKeyPath:keyPath];</span><br><span class="line">        &#125;</span><br><span class="line">        @catch (NSException *exception) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)addDasen:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context&#123;</span><br><span class="line"></span><br><span class="line">    // 如果没有注册，那么才进行注册 第三步 存储之前的检索处理</span><br><span class="line">    if (![self observerKeyPath:keyPath]) &#123;</span><br><span class="line">        [self addDasen:observer forKeyPath:keyPath options:options context:context];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 进行检索获取Key</span><br><span class="line">- (BOOL)observerKeyPath:(NSString *)key &#123;</span><br><span class="line"></span><br><span class="line">    id info = self.observationInfo;</span><br><span class="line"></span><br><span class="line">    //_observer属性：里面放的是监听属性的通知，也就是当属性改变的时候让哪个对象执行observeValueForKeyPath的对象。</span><br><span class="line">    NSArray *array = [info valueForKey:@&quot;_observances&quot;];</span><br><span class="line"></span><br><span class="line">    for (id objc in array) &#123;</span><br><span class="line">        //_property 里面的NSKeyValueProperty存储的有keyPath,其他属性我们用不到，暂时就不说了。</span><br><span class="line">        id Properties = [objc valueForKeyPath:@&quot;_property&quot;];</span><br><span class="line">        NSString *keyPath = [Properties valueForKeyPath:@&quot;_keyPath&quot;];</span><br><span class="line"></span><br><span class="line">        if ([key isEqualToString:keyPath]) &#123;</span><br><span class="line">            return YES;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="https://github.com/yuanliangYL/YLCrashhandler">Demo地址:https://github.com/yuanliangYL/YLCrashhandler</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> iOS Crash Handle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS音视频开发（一）重识图片</title>
      <link href="/2021/08/04/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E4%B8%80/"/>
      <url>/2021/08/04/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h4 id="一-图片"><a href="#一-图片" class="headerlink" title="一. 图片"></a>一. 图片</h4><blockquote><ul><li><p>每张图片都有N个像素组成（N&gt;=1）</p></li><li><p>如果一张图片的分辨率是W x H, 那么：</p></li></ul><ol><li><p>每一行都有W个像素，共有H行，总计W*H个像素</p></li><li><p>宽度是W像素，高度是H像素</p></li></ol><ul><li>每一个像素都有其独立的颜色！！！</li></ul></blockquote><hr><h4 id="二、RGB颜色模型"><a href="#二、RGB颜色模型" class="headerlink" title="二、RGB颜色模型"></a>二、RGB颜色模型</h4><p><img src="/2021/08/04/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/iOS%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91%E4%B8%80/rgbColors.png" alt="&quot;RGB颜色模型&quot;"></p><blockquote><ul><li>RGB Color Model: RGB颜色模型（三原色 光模式）</li></ul><ol><li>R+G=Y</li><li>R+B=Magenta洋红色</li><li>G+B=Cyan青色[saɪæn]</li><li>R+G+B=W</li></ol></blockquote><p>思考：每一个像素的颜色信息是符合存储的？</p><blockquote><ul><li><p>位深度Bit Depth == 色彩深度（色深）Color Depth</p></li><li><p><strong>如果一张图片的位深度位n，那么它的每一个像素都会使用n个二进制位来存储颜色信息！！</strong></p></li><li><p>常见位深度是：24 ,表示每一个像素都会使用24个二进制位来存储颜色信息；</p></li><li><p>因为每一个像素的颜色都是用R、G、B这3个<strong>颜色通道</strong>合成的；</p></li><li><p>每个颜色通道都用8bit（位）表示其“含量”值（范围0000 0000 — 1111 1111，即0-255或00-FF）：</p><table><thead><tr><th align="center">颜色</th><th align="center">rgb表示</th><th align="center">十六进制表示</th></tr></thead><tbody><tr><td align="center">红色</td><td align="center">rgb(255,0,0)</td><td align="center">#ff0000</td></tr><tr><td align="center">绿色</td><td align="center">rgb(0,255,0)</td><td align="center">#00ff00</td></tr><tr><td align="center">蓝色</td><td align="center">rgb(0,0,255)</td><td align="center">#0000ff</td></tr><tr><td align="center">黄色</td><td align="center">rgb(255,255,0)</td><td align="center">#ffff00</td></tr><tr><td align="center">洋红色</td><td align="center">rgb(255,0,255)</td><td align="center">#ff00ff</td></tr><tr><td align="center">青色</td><td align="center">rgb(0,255,255)</td><td align="center">#00ffff</td></tr><tr><td align="center">白色</td><td align="center">rgb(255,255,255)</td><td align="center">#ffffff</td></tr><tr><td align="center">黑色</td><td align="center">rgb(0,0,0)</td><td align="center">#000000</td></tr></tbody></table></li></ul></blockquote><hr><h4 id="三、图片格式："><a href="#三、图片格式：" class="headerlink" title="三、图片格式："></a>三、图片格式：</h4><blockquote><p>位图与矢量图的区别：</p><p>分辨率：位图的质量与分辨率有关。而矢量图的质量与分辨率没有任何关系。</p><p>绘图工具：矢量图一般是用Adobe公司的Illustrator，而位图则使用的是Photoshop和Windows系统所自带的画图。</p><p>性质：位图是由像素所组成的点阵图像，矢量图是使用直线和曲线来描述图形。</p></blockquote><ol><li><p>png、jpg、gif三种格式称为位图</p></li><li><p>svg：矢量图</p><blockquote><ul><li><p>图片大小的计算：</p></li><li><p>理论值：</p><p>24位深度下，每个像素占3个字节，按kb计算: 像素<em>字节 =  (50 * 60 )</em> ( 24 / 8 ) = 9000b = 8.79kb(9000b/1024)</p><p><strong>注</strong>：jpg、png、图片的实际大小都小于理论计算值，因为他们都是经过算法压缩过的图片。</p></li></ul></blockquote></li><li><p>图片的压缩格式</p><ul><li>无损压缩：解压(显示时)后能够还原图片的原始数据：不损失图片质量；压缩率底，图片体积大</li><li>有损压缩：损失图片质量；压缩率高，图片体积小</li></ul><table><thead><tr><th align="center">图片类型</th><th align="center">压缩类型</th><th align="center">位深度</th></tr></thead><tbody><tr><td align="center">JPG/JPEG</td><td align="center">有损</td><td align="center">24bit</td></tr><tr><td align="center">PNG</td><td align="center">无损</td><td align="center">8\24\32bit</td></tr><tr><td align="center">GIF</td><td align="center">无损</td><td align="center">8bit</td></tr></tbody></table></li><li><p>GIF:支持动画：实现原理类似于手翻书，即：</p><blockquote><ul><li>gif内部存储了很多帧图片</li><li>短时间内连续按顺序呈现每一帧图片就会实现动画效果</li><li>基于：视觉暂留现象（persistence of vision），延续0.1~0.4秒左右</li><li>应用：早起电影的帧率：24fps （每秒的帧数）frames per second</li></ul></blockquote></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> iOS音视频开发 </category>
          
          <category> FFmpeg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    
  
  
</search>
